# Generated by Django 5.1.10 on 2025-09-03 16:58

from django.db import migrations


def migrate_cost_values(apps, schema_editor):
    """
    Convert old float cost values to new JSON structure.
    This handles AppliedControls that may have cost as a float or incomplete JSON.
    """
    AppliedControl = apps.get_model("core", "AppliedControl")

    for control in AppliedControl.objects.all():
        cost_updated = False

        # Case 1: cost is None, set to proper default
        if control.cost is None:
            control.cost = {
                "currency": "€",
                "amortization_period": 3,
                "build": {"fixed_cost": 0, "people_days": 0},
                "run": {"fixed_cost": 0, "people_days": 0},
            }
            cost_updated = True

        # Case 2: cost is a float (old format)
        elif isinstance(control.cost, (int, float)):
            old_cost = float(control.cost)
            control.cost = {
                "currency": "€",
                "amortization_period": 3,
                "build": {
                    "fixed_cost": old_cost,  # Put old cost in build fixed_cost
                    "people_days": 0,
                },
                "run": {"fixed_cost": 0, "people_days": 0},
            }
            cost_updated = True

        # Case 3: cost is a dict but missing required structure
        elif isinstance(control.cost, dict):
            cost_dict = control.cost

            # Ensure currency exists
            if "currency" not in cost_dict:
                cost_dict["currency"] = "€"
                cost_updated = True

            # Ensure amortization_period exists
            if "amortization_period" not in cost_dict:
                cost_dict["amortization_period"] = 3
                cost_updated = True

            # Ensure build structure exists
            if "build" not in cost_dict or not isinstance(cost_dict["build"], dict):
                cost_dict["build"] = {"fixed_cost": 0, "people_days": 0}
                cost_updated = True
            else:
                build = cost_dict["build"]
                if "fixed_cost" not in build:
                    build["fixed_cost"] = 0
                    cost_updated = True
                if "people_days" not in build:
                    build["people_days"] = 0
                    cost_updated = True

            # Ensure run structure exists
            if "run" not in cost_dict or not isinstance(cost_dict["run"], dict):
                cost_dict["run"] = {"fixed_cost": 0, "people_days": 0}
                cost_updated = True
            else:
                run = cost_dict["run"]
                if "fixed_cost" not in run:
                    run["fixed_cost"] = 0
                    cost_updated = True
                if "people_days" not in run:
                    run["people_days"] = 0
                    cost_updated = True

            control.cost = cost_dict

        # Save if we made changes
        if cost_updated:
            control.save(update_fields=["cost"])


def reverse_migrate_cost_values(apps, schema_editor):
    """
    Reverse migration - convert JSON cost back to float (if needed).
    This is a lossy operation, we'll take the build.fixed_cost as the old cost value.
    """
    AppliedControl = apps.get_model("core", "AppliedControl")

    for control in AppliedControl.objects.all():
        if isinstance(control.cost, dict):
            build_cost = control.cost.get("build", {}).get("fixed_cost", 0)
            control.cost = build_cost
            control.save(update_fields=["cost"])


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0095_update_cost_default_structure"),
    ]

    operations = [
        migrations.RunPython(
            migrate_cost_values,
            reverse_migrate_cost_values,
        ),
    ]
