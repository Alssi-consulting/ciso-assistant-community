# Generated by Django 5.1.10 on 2025-09-02 17:04

from django.db import migrations, models
import json


def convert_cost_to_json_postgresql_safe(apps, schema_editor):
    """Convert existing numeric cost values to new JSON structure - PostgreSQL safe"""
    # Use raw SQL to avoid trigger issues
    if schema_editor.connection.vendor == "postgresql":
        with schema_editor.connection.cursor() as cursor:
            # First, get all records with numeric costs
            cursor.execute("""
                SELECT id, cost
                FROM core_appliedcontrol
                WHERE cost IS NOT NULL
                AND (cost_old IS NULL OR cost_old = '')
            """)

            records = cursor.fetchall()

            # Convert each record
            for record_id, old_cost in records:
                if old_cost is not None:
                    try:
                        old_cost_float = float(old_cost)
                        new_cost_json = json.dumps(
                            {
                                "currency": "€",
                                "build": {
                                    "fixed_cost": old_cost_float,
                                    "people_days": 0.0,
                                },
                                "run": {"fixed_cost": 0.0, "people_days": 0.0},
                            }
                        )

                        # Store original value and update cost with JSON
                        cursor.execute(
                            """
                            UPDATE core_appliedcontrol
                            SET cost_old = %s, cost = %s
                            WHERE id = %s
                        """,
                            [str(old_cost), new_cost_json, record_id],
                        )
                    except (ValueError, TypeError) as e:
                        print(
                            f"Warning: Could not convert cost for AppliedControl {record_id}: {old_cost} - {e}"
                        )
    else:
        # For SQLite and other databases, use Django ORM
        AppliedControl = apps.get_model("core", "AppliedControl")

        for control in AppliedControl.objects.all():
            if control.cost is not None and (
                not hasattr(control, "cost_old") or not control.cost_old
            ):
                try:
                    old_cost = float(control.cost)
                    control.cost_old = str(control.cost)  # Store original
                    control.cost = {
                        "currency": "€",
                        "build": {"fixed_cost": old_cost, "people_days": 0.0},
                        "run": {"fixed_cost": 0.0, "people_days": 0.0},
                    }
                    control.save(update_fields=["cost", "cost_old"])
                except (ValueError, TypeError) as e:
                    print(
                        f"Warning: Could not convert cost for AppliedControl {control.id}: {control.cost} - {e}"
                    )


def reverse_cost_conversion(apps, schema_editor):
    """Convert JSON cost back to numeric using stored original values"""
    if schema_editor.connection.vendor == "postgresql":
        with schema_editor.connection.cursor() as cursor:
            cursor.execute("""
                UPDATE core_appliedcontrol
                SET cost = CAST(cost_old AS DOUBLE PRECISION)
                WHERE cost_old IS NOT NULL AND cost_old != ''
            """)
    else:
        AppliedControl = apps.get_model("core", "AppliedControl")

        for control in AppliedControl.objects.all():
            if hasattr(control, "cost_old") and control.cost_old:
                try:
                    control.cost = float(control.cost_old)
                    control.save(update_fields=["cost"])
                except (ValueError, TypeError):
                    control.cost = None
                    control.save(update_fields=["cost"])


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0092_terminology"),
    ]

    operations = [
        # Step 1: Add a backup field to store original numeric values
        migrations.AddField(
            model_name="appliedcontrol",
            name="cost_old",
            field=models.TextField(
                blank=True, null=True, help_text="Backup of original cost value"
            ),
        ),
        # Step 2: Convert cost field using raw SQL for PostgreSQL compatibility
        migrations.RunSQL(
            # Forward SQL - Convert double precision to jsonb manually
            sql="""
                -- For PostgreSQL: we need to handle the conversion manually
                DO $$
                BEGIN
                    IF EXISTS (
                        SELECT 1 FROM information_schema.columns
                        WHERE table_name = 'core_appliedcontrol'
                        AND column_name = 'cost'
                        AND data_type = 'double precision'
                    ) THEN
                        -- Rename old column
                        ALTER TABLE core_appliedcontrol RENAME COLUMN cost TO cost_temp;

                        -- Add new jsonb column
                        ALTER TABLE core_appliedcontrol ADD COLUMN cost JSONB;

                        -- Copy converted data
                        UPDATE core_appliedcontrol
                        SET cost = ('{"currency": "€", "build": {"fixed_cost": ' || COALESCE(cost_temp, 0) || ', "people_days": 0.0}, "run": {"fixed_cost": 0.0, "people_days": 0.0}}')::jsonb
                        WHERE cost_temp IS NOT NULL;

                        -- Drop old column
                        ALTER TABLE core_appliedcontrol DROP COLUMN cost_temp;

                        -- Set column properties
                        ALTER TABLE core_appliedcontrol ALTER COLUMN cost SET DEFAULT '{}';
                        COMMENT ON COLUMN core_appliedcontrol.cost IS 'Detailed cost structure including build and run costs';
                    END IF;
                END
                $$;
            """,
            # Reverse SQL - Convert back to double precision
            reverse_sql="""
                DO $$
                BEGIN
                    IF EXISTS (
                        SELECT 1 FROM information_schema.columns
                        WHERE table_name = 'core_appliedcontrol'
                        AND column_name = 'cost'
                        AND data_type = 'jsonb'
                    ) THEN
                        -- Rename jsonb column
                        ALTER TABLE core_appliedcontrol RENAME COLUMN cost TO cost_temp;

                        -- Add new double precision column
                        ALTER TABLE core_appliedcontrol ADD COLUMN cost DOUBLE PRECISION;

                        -- Extract numeric value from JSON
                        UPDATE core_appliedcontrol
                        SET cost = (cost_temp->>'build'->>'fixed_cost')::double precision
                        WHERE cost_temp IS NOT NULL AND cost_temp != 'null'::jsonb;

                        -- Drop temp column
                        ALTER TABLE core_appliedcontrol DROP COLUMN cost_temp;

                        -- Set column properties
                        COMMENT ON COLUMN core_appliedcontrol.cost IS 'Cost of the measure (using globally-chosen currency)';
                    END IF;
                END
                $$;
            """,
        ),
        # Step 4: Remove backup field (can be kept for safety if needed)
        migrations.RemoveField(
            model_name="appliedcontrol",
            name="cost_old",
        ),
    ]
